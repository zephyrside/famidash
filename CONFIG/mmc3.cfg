MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
		
	RAM:        start = $0300, size = $0400, define = yes;
    C_STACK:    start = $06E0, size = $0020, define = yes;
	OAM_BUF:    start = $0200, size = $0100, define = yes;
    PAL_BUF:    start = $01C0, size = $0040, define = yes;
    VRAM_BUF:   start = $0700, size = $0100, define = yes;

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:
    ROM_M_00: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_01: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_02: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_03: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_04: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_05: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_06: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_07: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_08: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_09: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0C: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0D: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0E: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_0F: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_10: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_11: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_12: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_13: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_14: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_15: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_16: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_17: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_18: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_19: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_1A: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_1B: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_1C: start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    ROM_M_1D: start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    # MMC3 uses exclusively 8kb banks, so we have to break up the 16kb of fixed storage, too.
    PRG:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    PRG_2:  start = $e000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00, define = yes;
    



#2 Bank of 8K CHR ROM
    CHR_M_00: start = $0000, size = $2000, file = %O, fill = yes;
    CHR_M_01: start = $0000, size = $2000, file = %O, fill = yes;
}




SEGMENTS {
    HEADER:   load = HEADER, type = ro, define = yes;
    
    # Banks for mmc3 are split into two groups: 
    # A: The first 8kb section in memory
    # B: The second 8kb section in memory.
    # You can only put banks from section A into the first memory bank, and banks from section B into the second.
    LVL_BANK_00:   load = ROM_M_00, type = ro, optional = yes;
    LVL_BANK_01:   load = ROM_M_01, type = ro, optional = yes;
    LVL_BANK_02:   load = ROM_M_02, type = ro, optional = yes;
    LVL_BANK_03:   load = ROM_M_03, type = ro, optional = yes;
    LVL_BANK_04:   load = ROM_M_04, type = ro, optional = yes;
    LVL_BANK_05:   load = ROM_M_05, type = ro, optional = yes;
    LVL_BANK_06:   load = ROM_M_06, type = ro, optional = yes;
    LVL_BANK_07:   load = ROM_M_07, type = ro, optional = yes;
    LVL_BANK_08:   load = ROM_M_08, type = ro, optional = yes;
    LVL_BANK_09:   load = ROM_M_09, type = ro, optional = yes;
    LVL_BANK_0A:   load = ROM_M_0A, type = ro, optional = yes;
    LVL_BANK_0B:   load = ROM_M_0B, type = ro, optional = yes;
    LVL_BANK_0C:   load = ROM_M_0C, type = ro, optional = yes;
    LVL_BANK_0D:   load = ROM_M_0D, type = ro, optional = yes;
    LVL_BANK_0E:   load = ROM_M_0E, type = ro, optional = yes;
    LVL_BANK_0F:   load = ROM_M_0F, type = ro, optional = yes;
    LVL_BANK_10:   load = ROM_M_10, type = ro, optional = yes;
    LVL_BANK_11:   load = ROM_M_11, type = ro, optional = yes;
    LVL_BANK_12:   load = ROM_M_12, type = ro, optional = yes;
    LVL_BANK_13:   load = ROM_M_13, type = ro, optional = yes;
    LVL_BANK_14:   load = ROM_M_14, type = ro, optional = yes;
    LVL_BANK_15:   load = ROM_M_15, type = ro, optional = yes;
    LVL_BANK_16:   load = ROM_M_16, type = ro, optional = yes;
    LVL_BANK_17:   load = ROM_M_17, type = ro, optional = yes;
    MUS_BANK_00:   load = ROM_M_18, type = ro, optional = yes;
    MUS_BANK_01:   load = ROM_M_19, type = ro, optional = yes;
    MUS_BANK_02:   load = ROM_M_1A, type = ro, optional = yes;
    MUS_BANK_03:   load = ROM_M_1B, type = ro, optional = yes;
    SPR_BANK_00:   load = ROM_M_1C, type = ro, optional = yes;
    DMC_BANK_00:   load = ROM_M_1D, type = ro, align = $100;
    
    # Fixed banks
    CODE:     load = PRG, type = ro, define = yes;
    RODATA:   load = PRG, type = ro, define = yes;
    DATA:     load = PRG, run = RAM, type = rw, define = yes;
    STARTUP:  load = PRG_2, type = ro, define = yes;
    CODE_2:   load = PRG_2, type = ro, define = yes;
    RODATA_2: load = PRG_2, type = ro, define = yes;
	VECTORS:  load = PRG_2, start = $fffa, type = ro;

    CHR_BANK_00:    load = CHR_M_00,            type = rw;
    CHR_BANK_01:    load = CHR_M_01,            type = rw;

    BSS:      load = RAM,            type = bss, define = yes;
    ZEROPAGE: load = ZP,             type = zp;
	
}




#removed CONDES features




SYMBOLS {
    MAPPER:         type = weak, value = 4;     # 4 = MMC3
    SUBMAPPER:      type = weak, value = 0;     # Standard
    MIRRORING:      type = weak, value = 0;     # 0, 1 = doesn't matter (its an MMC3 register), 8 = hardwired 4-screen 
    PRG_BANK_COUNT: type = weak, value = 16;    # 16k PRG chunk count
    CHR_BANK_COUNT: type = weak, value = 2;     # 8k CHR chunk count
    SRAM:           type = weak, value = 0;     # 1 = battery backed SRAM at $6000-7FFF
    TRAINER:        type = weak, value = 0;     # unneeded
    CONSOLE_TYPE:   type = weak, value = 0;     # Standard NES/Famicom
    PRG_RAM_COUNT:  type = weak, value = 0;     #
    PRG_NVRAM_COUNT:type = weak, value = 0;     # None
    CHR_RAM_COUNT:  type = weak, value = 0;     # None
    CHR_NVRAM_COUNT:type = weak, value = 0;     # 
    CPU_PPU_TIMING: type = weak, value = 0;     # NTSC NES/Famicom
    HARDWARE_TYPE:  type = weak, value = 0;     # Unused
    MISC_ROMS:      type = weak, value = 0;     # No misc ROMs
    DEF_EXP_DEVICE: type = weak, value = 0;     # Unspecified

    FIRST_MUSIC_BANK:   type = weak, value = 24;
}

